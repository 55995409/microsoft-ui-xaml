// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "FormSection.h"

CppWinRTActivatableClassWithDPFactory(FormSection)

GlobalDependencyProperty FormSectionProperties::s_BuddiesProperty{ nullptr };
GlobalDependencyProperty FormSectionProperties::s_ColumnsProperty{ nullptr };
GlobalDependencyProperty FormSectionProperties::s_HeaderProperty{ nullptr };
GlobalDependencyProperty FormSectionProperties::s_LengthProperty{ nullptr };

FormSectionProperties::FormSectionProperties()
{
    EnsureProperties();
}

void FormSectionProperties::EnsureProperties()
{
    if (!s_BuddiesProperty)
    {
        s_BuddiesProperty =
            InitializeDependencyProperty(
                L"Buddies",
                winrt::name_of<int>(),
                winrt::name_of<winrt::FormSection>(),
                true /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(0),
                &FormSection::OnBuddiesPropertyChanged);
    }
    if (!s_ColumnsProperty)
    {
        s_ColumnsProperty =
            InitializeDependencyProperty(
                L"Columns",
                winrt::name_of<int>(),
                winrt::name_of<winrt::FormSection>(),
                false /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(1),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_HeaderProperty)
    {
        s_HeaderProperty =
            InitializeDependencyProperty(
                L"Header",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::FormSection>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_LengthProperty)
    {
        s_LengthProperty =
            InitializeDependencyProperty(
                L"Length",
                winrt::name_of<winrt::GridLength>(),
                winrt::name_of<winrt::FormSection>(),
                true /* isAttached */,
                ValueHelper<winrt::GridLength>::BoxValueIfNecessary(FormSection::s_defaultLength),
                &FormSection::OnLengthPropertyChanged);
    }
}

void FormSectionProperties::ClearProperties()
{
    s_BuddiesProperty = nullptr;
    s_ColumnsProperty = nullptr;
    s_HeaderProperty = nullptr;
    s_LengthProperty = nullptr;
}

void FormSectionProperties::OnPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::FormSection>();
    winrt::get_self<FormSection>(owner)->OnPropertyChanged(args);
}

void FormSectionProperties::SetBuddies(winrt::UIElement const& target, int value)
{
    target.SetValue(s_BuddiesProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int FormSectionProperties::GetBuddies(winrt::UIElement const& target)
{
    return ValueHelper<int>::CastOrUnbox(target.GetValue(s_BuddiesProperty));
}

void FormSectionProperties::Columns(int value)
{
    static_cast<FormSection*>(this)->SetValue(s_ColumnsProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int FormSectionProperties::Columns()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<FormSection*>(this)->GetValue(s_ColumnsProperty));
}

void FormSectionProperties::Header(winrt::hstring const& value)
{
    static_cast<FormSection*>(this)->SetValue(s_HeaderProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring FormSectionProperties::Header()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<FormSection*>(this)->GetValue(s_HeaderProperty));
}

void FormSectionProperties::SetLength(winrt::UIElement const& target, winrt::GridLength const& value)
{
    target.SetValue(s_LengthProperty, ValueHelper<winrt::GridLength>::BoxValueIfNecessary(value));
}

winrt::GridLength FormSectionProperties::GetLength(winrt::UIElement const& target)
{
    return ValueHelper<winrt::GridLength>::CastOrUnbox(target.GetValue(s_LengthProperty));
}
