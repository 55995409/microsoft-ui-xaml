// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NumberBox.h"

CppWinRTActivatableClassWithDPFactory(NumberBox)

GlobalDependencyProperty NumberBoxProperties::s_ValueProperty{ nullptr };

NumberBoxProperties::NumberBoxProperties()
    : m_valueChangedEventSource{static_cast<NumberBox*>(this)}
{
    EnsureProperties();
}

void NumberBoxProperties::EnsureProperties()
{
    if (!s_ValueProperty)
    {
        s_ValueProperty =
            InitializeDependencyProperty(
                L"Value",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnValuePropertyChanged));
    }
}

void NumberBoxProperties::ClearProperties()
{
    s_ValueProperty = nullptr;
}

void NumberBoxProperties::OnValuePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::Value(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_ValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::Value()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_ValueProperty));
}

winrt::event_token NumberBoxProperties::ValueChanged(winrt::TypedEventHandler<winrt::NumberBox, winrt::IInspectable> const& value)
{
    return m_valueChangedEventSource.add(value);
}

void NumberBoxProperties::ValueChanged(winrt::event_token const& token)
{
    m_valueChangedEventSource.remove(token);
}
