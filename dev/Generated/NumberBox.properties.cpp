// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NumberBox.h"

CppWinRTActivatableClassWithDPFactory(NumberBox)

GlobalDependencyProperty NumberBoxProperties::s_BasicValidationModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_HyperScrollEnabledProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MaxValueProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MinMaxModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MinValueProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SpinButtonPlacementModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_StepFrequencyProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_ValueProperty{ nullptr };

NumberBoxProperties::NumberBoxProperties()
    : m_valueChangedEventSource{static_cast<NumberBox*>(this)}
{
    EnsureProperties();
}

void NumberBoxProperties::EnsureProperties()
{
    if (!s_BasicValidationModeProperty)
    {
        s_BasicValidationModeProperty =
            InitializeDependencyProperty(
                L"BasicValidationMode",
                winrt::name_of<winrt::NumberBoxBasicValidationMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxBasicValidationMode>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBasicValidationModePropertyChanged));
    }
    if (!s_HyperScrollEnabledProperty)
    {
        s_HyperScrollEnabledProperty =
            InitializeDependencyProperty(
                L"HyperScrollEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnHyperScrollEnabledPropertyChanged));
    }
    if (!s_MaxValueProperty)
    {
        s_MaxValueProperty =
            InitializeDependencyProperty(
                L"MaxValue",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnMaxValuePropertyChanged));
    }
    if (!s_MinMaxModeProperty)
    {
        s_MinMaxModeProperty =
            InitializeDependencyProperty(
                L"MinMaxMode",
                winrt::name_of<winrt::NumberBoxMinMaxMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxMinMaxMode>::BoxValueIfNecessary(winrt::NumberBoxMinMaxMode::NoBounds),
                winrt::PropertyChangedCallback(&OnMinMaxModePropertyChanged));
    }
    if (!s_MinValueProperty)
    {
        s_MinValueProperty =
            InitializeDependencyProperty(
                L"MinValue",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnMinValuePropertyChanged));
    }
    if (!s_SpinButtonPlacementModeProperty)
    {
        s_SpinButtonPlacementModeProperty =
            InitializeDependencyProperty(
                L"SpinButtonPlacementMode",
                winrt::name_of<winrt::NumberBoxSpinButtonPlacementMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(winrt::NumberBoxSpinButtonPlacementMode::Hidden),
                winrt::PropertyChangedCallback(&OnSpinButtonPlacementModePropertyChanged));
    }
    if (!s_StepFrequencyProperty)
    {
        s_StepFrequencyProperty =
            InitializeDependencyProperty(
                L"StepFrequency",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(1),
                winrt::PropertyChangedCallback(&OnStepFrequencyPropertyChanged));
    }
    if (!s_ValueProperty)
    {
        s_ValueProperty =
            InitializeDependencyProperty(
                L"Value",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnValuePropertyChanged));
    }
}

void NumberBoxProperties::ClearProperties()
{
    s_BasicValidationModeProperty = nullptr;
    s_HyperScrollEnabledProperty = nullptr;
    s_MaxValueProperty = nullptr;
    s_MinMaxModeProperty = nullptr;
    s_MinValueProperty = nullptr;
    s_SpinButtonPlacementModeProperty = nullptr;
    s_StepFrequencyProperty = nullptr;
    s_ValueProperty = nullptr;
}

void NumberBoxProperties::OnBasicValidationModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::OnHyperScrollEnabledPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::OnMaxValuePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::OnMinMaxModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::OnMinValuePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::OnSpinButtonPlacementModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::OnStepFrequencyPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::OnValuePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnPropertyChanged(args);
}

void NumberBoxProperties::BasicValidationMode(winrt::NumberBoxBasicValidationMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_BasicValidationModeProperty, ValueHelper<winrt::NumberBoxBasicValidationMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxBasicValidationMode NumberBoxProperties::BasicValidationMode()
{
    return ValueHelper<winrt::NumberBoxBasicValidationMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_BasicValidationModeProperty));
}

void NumberBoxProperties::HyperScrollEnabled(bool value)
{
    static_cast<NumberBox*>(this)->SetValue(s_HyperScrollEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NumberBoxProperties::HyperScrollEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_HyperScrollEnabledProperty));
}

void NumberBoxProperties::MaxValue(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MaxValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::MaxValue()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MaxValueProperty));
}

void NumberBoxProperties::MinMaxMode(winrt::NumberBoxMinMaxMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MinMaxModeProperty, ValueHelper<winrt::NumberBoxMinMaxMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxMinMaxMode NumberBoxProperties::MinMaxMode()
{
    return ValueHelper<winrt::NumberBoxMinMaxMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MinMaxModeProperty));
}

void NumberBoxProperties::MinValue(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MinValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::MinValue()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MinValueProperty));
}

void NumberBoxProperties::SpinButtonPlacementMode(winrt::NumberBoxSpinButtonPlacementMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_SpinButtonPlacementModeProperty, ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxSpinButtonPlacementMode NumberBoxProperties::SpinButtonPlacementMode()
{
    return ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SpinButtonPlacementModeProperty));
}

void NumberBoxProperties::StepFrequency(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_StepFrequencyProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::StepFrequency()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_StepFrequencyProperty));
}

void NumberBoxProperties::Value(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_ValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::Value()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_ValueProperty));
}

winrt::event_token NumberBoxProperties::ValueChanged(winrt::TypedEventHandler<winrt::NumberBox, winrt::IInspectable> const& value)
{
    return m_valueChangedEventSource.add(value);
}

void NumberBoxProperties::ValueChanged(winrt::event_token const& token)
{
    m_valueChangedEventSource.remove(token);
}
