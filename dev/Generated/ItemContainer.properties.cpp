// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "ItemContainer.h"

CppWinRTActivatableClassWithDPFactory(ItemContainer)

GlobalDependencyProperty ItemContainerProperties::s_IsSelectedProperty{ nullptr };

ItemContainerProperties::ItemContainerProperties()
{
    EnsureProperties();
}

void ItemContainerProperties::EnsureProperties()
{
    if (!s_IsSelectedProperty)
    {
        s_IsSelectedProperty =
            InitializeDependencyProperty(
                L"IsSelected",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ItemContainer>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                winrt::PropertyChangedCallback(&OnIsSelectedPropertyChanged));
    }
}

void ItemContainerProperties::ClearProperties()
{
    s_IsSelectedProperty = nullptr;
}

void ItemContainerProperties::OnIsSelectedPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ItemContainer>();
    winrt::get_self<ItemContainer>(owner)->OnIsSelectedPropertyChanged(args);
}

void ItemContainerProperties::IsSelected(bool value)
{
    static_cast<ItemContainer*>(this)->SetValue(s_IsSelectedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool ItemContainerProperties::IsSelected()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ItemContainer*>(this)->GetValue(s_IsSelectedProperty));
}
